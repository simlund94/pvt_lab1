package domain;

import java.time.LocalDateTime;

/**
 * A class representing an employee, for the purpose of a cleaning management system.
 *
 * <p>This class provides basic fields for an employee, like name, a unique identifier and a birth year.
 * The fields {@code id} and {@code birthYear} are immutable, while {@code name} can be altered after
 * instantiation.</p>
 */
public class Employee {

    /**
     * The name of the employee, mutable in case of name changes.
     */
    private String name;

    /**
     * The unique identifier of this employee, immutable as it's the primary key in the database and
     * should not be altered.
     */
    private final int id;

    /**
     * The birth year of the employee, immutable as this has no reason to ever change.
     */
    private final int birthYear;

    /**
     * Constructor for creating an employee object with a given id.
     *
     * @param id        The id or primary key of the employee, a non-negative integer
     * @param name      The name of the employee, non-empty, non-null and max 50 characters
     * @param birthYear The birth year of the employee
     * @throws IllegalArgumentException if id is negative, or the name is invalid
     */
    public Employee(int id, String name, int birthYear) {
        if (id < 0) {
            throw new IllegalArgumentException("Id cannot be negative");
        }
        this.id = id;

        LocalDateTime now = LocalDateTime.now();
        if (birthYear < 1900 || birthYear > now.getYear()) {
            throw new IllegalArgumentException("Birth year must be between 1900 and " + now.getYear());
        }
        this.birthYear = birthYear;
        setName(name);
    }

    /**
     * Constructor for creating an employee object without a given id. Useful for inserting a
     * new employee record into the database where the id will be autogenerated.
     *
     * @param name      The name of the employee, non-empty, non-null and max 50 characters
     * @param birthYear The birth year of the employee
     */
    public Employee(String name, int birthYear) {
        this(0, name, birthYear);
    }

    /**
     * Set method for the name, containing checks for av valid string which fits in the database schema
     *
     * @param name The name of the employee
     */
    public void setName(String name) {
        if (name == null || name.isEmpty()) {
            throw new IllegalArgumentException("Name cannot be null or empty");
        }
        if (name.length() > 50) {
            throw new IllegalArgumentException("Name cannot be longer than 50 characters");
        }
        this.name = name;
    }

    public int getBirthYear() {
        return birthYear;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    /**
     * Description of the object and its state, only for demo and debugging.
     */
    @Override
    public String toString() {
        return String.format("ID: %d, Name: %s, Birth Year: %d", id, name, birthYear);
    }

}
